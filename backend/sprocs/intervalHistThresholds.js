
module.exports.sql
    = " CREATE OR REPLACE FUNCTION\n"
    + "     interval_hist_thresholds (duration INTERVAL) RETURNS INTERVAL[] AS $$\n"
    + "     WITH candidates AS (\n"
    + "         SELECT\n"
    + "             step,\n"
    + "             EXTRACT(EPOCH FROM greatest(duration, interval '10m'))\n"
    + "                 / EXTRACT(EPOCH FROM step)\n"
    + "                 AS num_steps\n"
    + "         FROM (\n"
    + "             VALUES\n"
    + "                 (interval '1m'),\n"
    + "                 (interval '2m'),\n"
    + "                 (interval '3m'),\n"
    + "                 (interval '5m'),\n"
    + "                 (interval '10m'),\n"
    + "                 (interval '15m'),\n"
    + "                 (interval '20m'),\n"
    + "                 (interval '30m'),\n"
    + "                 (interval '1h'),\n"
    + "                 (interval '2h'),\n"
    + "                 (interval '3h'),\n"
    + "                 (interval '4h'),\n"
    + "                 (interval '6h'),\n"
    + "                 (interval '12h'),\n"
    + "                 (interval '24h')\n"
    + "         ) AS possible_steps (step)\n"
    + "     ),\n"
    + "     selected AS (\n"
    + "         SELECT\n"
    + "             step,\n"
    + "             CAST(ceiling(num_steps) AS INTEGER) AS num_steps\n"
    + "         FROM candidates\n"
    + "         WHERE num_steps >= 7\n"
    + "         ORDER BY num_steps\n"
    + "         LIMIT 1\n"
    + "     )\n"
    + "     SELECT array_agg(i * step)\n"
    + "     FROM selected,\n"
    + "     generate_series(0, num_steps) AS i\n"
    + " $$ LANGUAGE SQL;\n"

    + " CREATE OR REPLACE FUNCTION\n"
    + "     interval_array_to_seconds (durations INTERVAL[]) RETURNS DOUBLE PRECISION[] AS $$\n"
    + "     SELECT array_agg(EXTRACT(EPOCH FROM d))\n"
    + "     FROM unnest(durations) AS vals (d)\n"
    + " $$ LANGUAGE SQL;\n"

    + " CREATE OR REPLACE FUNCTION\n"
    + "     interval_array_to_strings (durations INTERVAL[]) RETURNS TEXT[] AS $$\n"
    + "     SELECT array_agg(format_interval(d))\n"
    + "     FROM unnest(durations) AS vals (d)\n"
    + " $$ LANGUAGE SQL;\n"
