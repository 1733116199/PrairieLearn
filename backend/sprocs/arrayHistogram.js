
// Based on: https://wiki.postgresql.org/wiki/Aggregate_Histogram

module.exports.sql
    = " CREATE OR REPLACE FUNCTION\n"
    + "     array_histogram_sfunc (state INTEGER[], val anyelement, thresholds anyarray) RETURNS INTEGER[] AS $$\n"
    + " DECLARE\n"
    + "     nbuckets INTEGER;\n"
    + "     bucket INTEGER;\n"
    + " BEGIN\n"
    + "     nbuckets := array_length(thresholds, 1) - 1;\n"
    + "     -- Init the array with the correct number of 0's so the caller doesn't see NULLs\n"
    + "     IF state IS NULL THEN\n"
    + "         state := array_fill(0, ARRAY[nbuckets]);\n"
    + "     END IF;\n"
    + "     \n"
    + "     -- width_bucket returns values in the range 0 to (nbuckets + 1)\n"
    + "     -- where 0 and (nbuckets + 1) indicate above- and below-range values\n"
    + "     bucket := width_bucket(val, thresholds);\n"
    + "     \n"
    + "     IF bucket IS NOT NULL THEN\n"
    + "         -- clip bucket to allowed range\n"
    + "         bucket := GREATEST(1, LEAST(nbuckets, bucket));\n"
    + "         state[bucket] := state[bucket] + 1;\n"
    + "     END IF;\n"
    + "     \n"
    + "     RETURN state;\n"
    + " END;\n"
    + " $$ LANGUAGE plpgsql IMMUTABLE;\n"
    + " \n"
    + " -- Tell Postgres how to use the new function\n"
    + " DROP AGGREGATE IF EXISTS array_histogram (anyelement, anyarray) CASCADE;\n"
    + " CREATE AGGREGATE array_histogram (anyelement, anyarray) (\n"
    + "     SFUNC = array_histogram_sfunc,\n"
    + "     STYPE = INTEGER[]\n"
    + " );";
