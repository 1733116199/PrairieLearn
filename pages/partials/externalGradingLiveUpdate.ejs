<% if (question.grading_method == 'External') { %>
<script>
  $(function() {
    var socket = io('/external-grading');
    var variantId = '<%= variant.id %>';
    var variantToken = '<%= variantToken %>';
    var urlPrefix = '<%= urlPrefix %>';
    var questionContext = '<%= question_context %>';
    var csrfToken = '<%= __csrf_token %>';

    // Render initial grading states into the DOM
    $('[id^=submission-]').each(function(index, elem) {
      var status = $(elem).data('grading-job-status');
      var submissionId = $(elem).attr('id').replace('submission-', '');
      updateStatus(submissionId, status);
    });

    socket.emit('init', {variant_id: variantId, variant_token: variantToken}, function(msg) {
      handleStatusChange(msg);
    });

    socket.on('change:status', function(msg) {
      handleStatusChange(msg);
    });

    function handleStatusChange(msg) {
      msg.submissions.forEach(function(submission) {
        // Check if this submission isn't in the DOM yet and add it if it is
        var submissionId = 'submission-' + submission.id;
        if ($('#' + submissionId).length == 0) {
          // We need to create a container for this question
          $('#question-submissions').prepend('<div id="' + submissionId + '"></div>');
          fetchResults(submission.id, function() {
            // Let's collapse all past submissions once the new one renders
            $('#question-submissions .question-submission').each(function () {
              var thisSubmissionId = $(this).attr('id');
              if (thisSubmissionId != submissionId) {
                $(this).find('.collapse').collapse('hide');
              }
            });
            updateStatus(submission);
          });
        } else {
          // Always update results
          updateStatus(submission);

          if (submission.grading_job_status == 'graded') {
            // Check if this state is reflected in the DOM; it's possible this is
            // just a message from the initial data sync and that we already have
            // results in the DOM.
            var status = $('#submission-' + submission.id).data('grading-job-status');
            var gradingJobId = $('#submission-' + submission.id).data('grading-job-id');

            // Ignore jobs that we already have results for, but allow results
            // from more recent grading jobs to replace the existing ones.
            if (status != 'graded' || gradingJobId != submission.grading_job_id) {
              // Let's get results for this job!
              fetchResults(submission.id);
            }
          }
        }
      });
    }

    function fetchResults(submissionId, callback) {
      socket.emit('getResults', {
        variant_id: variantId,
        variant_token: variantToken,
        submission_id: submissionId,
        url_prefix: urlPrefix,
        question_context: questionContext,
        csrf_token: csrfToken
      }, function(msg) {
        console.log(msg);
        if (msg.submissionPanel) {
          $('#submission-' + submissionId).replaceWith(function() {
            return $(msg.submissionPanel).fadeIn('slow');
          });
          resultsLoaded = true;
        }
        if (msg.questionScorePanel) {
          $('#question-score-panel').replaceWith(function() {
            return $(msg.questionScorePanel).fadeIn('slow');
          });
        }
        if (msg.assessmentScorePanel) {
          $('#assessment-score-panel').replaceWith(function() {
            return $(msg.assessmentScorePanel).fadeIn('slow');
          });
        }
        if (msg.questionPanelFooter) {
          $('#question-panel-footer').replaceWith(function() {
            return $(msg.questionPanelFooter).fadeIn('slow');
          });
        }

        if (callback) {
          callback();
        }
      });
    }

    function updateStatus(submission) {
      var display = $('#grading-status-' + submission.id);
      var label;
      var spinner = '<i class="fa fa-sync fa-spin fa-fw"></i>';
      switch (submission.grading_job_status) {
        case 'requested':
          label = 'Grading requested ' + spinner;
          break;
        case 'queued':
          label = 'Queued for grading ' + spinner;
          break;
        case 'grading':
          label = 'Grading in progress ' + spinner;
          break;
        case 'graded':
          label = 'Graded!'
          break;
        default:
          label = 'UNKNOWN STATUS';
          break;
      }
      display.html(label);
    }
  });
</script>
<% } %>
