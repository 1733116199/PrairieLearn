import re
import json

# parse the doc markdown for a list of attributes for each element


def filter_idx(f, lst):
    ret = []
    for i, elem in enumerate(lst):
        if f(elem):
            ret.append(i)
    return ret


docfile = open('../../docs/pl-drawing/index.md')
doctxt = docfile.read().split('\n')

## Each element has its own section that starts with a header, this contains the line that each header is on
element_headers = filter_idx(lambda x: x.startswith('## '), doctxt)
num_elem = len(element_headers)
elements = {}


for i in range(num_elem):
    if i == (num_elem - 1):
        # If this is the last header, then get until the end of the doc
        lines = doctxt[element_headers[i]:]
    else:
        # Get the lines from this header until the next
        lines = doctxt[element_headers[i]:element_headers[i + 1]]

    # Get the name as anything between two backticks (`pl-drawing`)
    name = re.search('`(.+?)`', doctxt[element_headers[i]])[1]

    # Find the subsection that begins with "Customizations"
    sections = filter_idx(lambda x: x.startswith('#'), lines)
    tableSection = -1
    for i, section in enumerate(sections):
        if lines[section].startswith('#### Customizations'):
            tableSection = i
            break

    # If there's no customizations we don't need to do anything
    if tableSection == -1:
        continue

    # Get the lines the table is on
    if tableSection == len(sections) - 1:
        table = lines[sections[tableSection]:]
    else:
        table = lines[sections[tableSection]:sections[tableSection + 1]]
    tableAry = list(map(lambda x: x.split('|'), table))

    attributes = {}
    
    # Create a dictionary for the element as { 'attribute': type }
    for tabEntry in tableAry:
        match = re.match('`(.+?)`', tabEntry[0])
        if match is not None and len(tabEntry) >= 2:
            attributes[match[1]] = tabEntry[1].strip()

    if len(attributes) > 0:
        elements[name] = attributes


with open('attributes.py', mode='w') as f:
    f.write('# This file is automatically generated from the documentation, run "dump-elem-attribs.py" to re-generate.\n\n')
    f.write('attributes = ')
    f.write(repr(elements))
